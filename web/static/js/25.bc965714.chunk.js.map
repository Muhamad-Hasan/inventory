{"version":3,"sources":["apimiddleware/url.js","views/inventory/RawMaterial.js"],"names":["baseURL","basePATH","RawMaterial","useState","tableData","setData","name","setName","search","setSearch","useEffect","a","axios","get","data","console","log","status","fetchData","style","display","justifyContent","margin","type","borderRadius","width","height","fontSize","fontWeight","borderColor","placeholder","value","onChange","e","target","color","rounded","size","marginLeft","onClick","length","map","text","index","xs","sm","md","window","location","_id","className","date","format","Date","description","stock","used"],"mappings":"6KAAA,oEAAO,IAAMA,EAAU,6BAEVC,EAAW,iC,wKCgJTC,UAxFK,WAAO,IAAD,EAEOC,mBAAS,IAFhB,mBAEfC,EAFe,KAEJC,EAFI,OAGEF,mBAAS,IAHX,mBAGfG,EAHe,KAGTC,EAHS,OAIMJ,oBAAS,GAJf,mBAIfK,EAJe,KAIPC,EAJO,KAmBtB,OAbAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,0DACeL,EADf,gCAC4BM,IAAMC,IAAN,UAAab,IAAb,oBAAgCM,IAD5D,yDAC4EM,IAAMC,IAAN,UAAab,IAAb,QAD5E,0BACQc,EADR,KAEIC,QAAQC,IAAI,OAAQF,GACD,KAAfA,EAAKG,QACLZ,EAAQS,EAAKA,MAJrB,6CADY,sBASZ,OATa,WAAD,wBAQZI,GACO,WACHT,GAAU,MAEf,CAACD,IAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMW,MAAO,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,OAAQ,SAC9D,kBAAC,IAAD,CAAQC,KAAK,OAAOJ,MAAO,CAAEK,aAAc,OAAQC,MAAO,MAAOC,OAAQ,OAAQC,SAAU,OAAQC,WAAY,OAAQC,YAAa,SAAWC,YAAY,SAASC,MAAOzB,EAAM0B,SAAU,SAACC,GAAD,OAAO1B,EAAQ0B,EAAEC,OAAOH,UACnN,kBAAC,IAAD,CAAQI,MAAM,UAAUC,SAAO,EAACC,KAAK,KAAKlB,MAAO,CAAEmB,WAAY,QAAUC,QAAS,kBAAM9B,GAAU,KAAlG,YAMR,6BAEA,kBAAC,IAAD,KAEQL,GAAaA,EAAUoC,OAAS,GAChCpC,EAAUqC,KAAI,SAACC,EAAMC,GACjB,OAEI,kBAAC,IAAD,CAAMC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIP,QAAS,kBAAIQ,OAAOC,SAAP,+BAA0CN,EAAKO,OACpF,kBAAC,IAAD,CAAOd,MAAM,UAAUe,UAAU,cAC7B,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,2BAAIR,EAAKpC,OAGb,kBAAC,IAAD,KACI,0BAAMa,MAAO,CAAEC,QAAS,OAAQC,eAAgB,aAC3C8B,IAAKC,OAAO,IAAIC,KAAKX,EAAKS,MAAO,kBAOlD,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMhC,MAAO,CAAEO,OAAQ,SAClBgB,EAAKY,cAId,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,2BAAG,sCAAH,cAAsBZ,EAAKa,MAA3B,QACA,2BAAG,qCAAH,cAAqBb,EAAKc,KAA1B","file":"static/js/25.bc965714.chunk.js","sourcesContent":["export const baseURL = \"http://localhost:8000/api/\"\r\n// \"https://maclay.herokuapp.com/api/\";\r\nexport const basePATH = \"https://maclay.herokuapp.com/\"\r\n\r\n\r\n// export const baseURL = \"http://localhost:8000/api/\"\r\n// // \"https://maclay.herokuapp.com/api/\";\r\n// export const basePATH = \"http://localhost:8000/\"\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CCol,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CRow,\r\n    CTabContent,\r\n    CTabPane,\r\n    CCard,\r\n    CCardBody,\r\n    CTabs,\r\n    CCardHeader,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CSelect,\r\n    CCardFooter,\r\n    CButton,\r\n    CContainer\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react';\r\nimport axios from \"axios\";\r\nimport { baseURL } from \"../../apimiddleware/url\";\r\nimport { MDBBtn } from \"mdbreact\";\r\nimport date from 'date-and-time';\r\n// import {\r\n//     CButton,\r\n//     CCard,\r\n//     CCardBody,\r\n//     CCardFooter,\r\n//     CCardHeader,\r\n//     CCol,\r\n//     CCollapse,\r\n//     CDropdownItem,\r\n//     CDropdownMenu,\r\n//     CDropdownToggle,\r\n//     CFade,\r\n//     CForm,\r\n//     CFormGroup,\r\n//     CFormText,\r\n//     CValidFeedback,\r\n//     CInvalidFeedback,\r\n//     CTextarea,\r\n//     CInput,\r\n//     CInputFile,\r\n//     CInputCheckbox,\r\n//     CInputRadio,\r\n//     CInputGroup,\r\n//     CInputGroupAppend,\r\n//     CInputGroupPrepend,\r\n//     CDropdown,\r\n//     CInputGroupText,\r\n//     CLabel,\r\n//     CSelect,\r\n//     CRow\r\n//   } from '@coreui/react'\r\n\r\nconst RawMaterial = () => {\r\n\r\n    const [tableData, setData] = useState([])\r\n    const [name, setName] = useState(\"\");\r\n    const [search, setSearch] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            let data = name ? await axios.get(`${baseURL}raw?name=${name}`) : await axios.get(`${baseURL}raw`);\r\n            console.log(\"data\", data);\r\n            if (data.status == 200) {\r\n                setData(data.data);\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => {\r\n            setSearch(false)\r\n        }\r\n    }, [search])\r\n    return (\r\n        <CContainer >\r\n            <CRow >\r\n                <CCol style={{ display: \"flex\", justifyContent: \"center\", margin: \"auto\" }}>\r\n                    <CInput type=\"text\" style={{ borderRadius: \"10px\", width: \"30%\", height: \"50px\", fontSize: \"20px\", fontWeight: \"bold\", borderColor: \"green\" }} placeholder=\"Search\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                    <MDBBtn color=\"success\" rounded size=\"md\" style={{ marginLeft: \"10px\" }} onClick={() => setSearch(true)}>\r\n                        Search\r\n        </MDBBtn>\r\n\r\n                </CCol>\r\n            </CRow>\r\n            <br />\r\n\r\n            <CRow>\r\n                {\r\n                    tableData && tableData.length > 0 &&\r\n                    tableData.map((text, index) => {\r\n                        return (\r\n\r\n                            <CCol xs=\"12\" sm=\"6\" md=\"4\" onClick={()=>window.location = `#/inventory/form/raw/${text._id}`}>\r\n                                <CCard color=\"success\" className=\"text-white\">\r\n                                    <CCardHeader>\r\n                                        <CRow>\r\n                                            <CCol>\r\n                                                <b>{text.name}</b>\r\n\r\n                                            </CCol>\r\n                                            <CCol>\r\n                                                <span style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                                                    {date.format(new Date(text.date), 'DD/MM/YYYY')}\r\n                                                </span>\r\n\r\n                                            </CCol>\r\n\r\n                                        </CRow>\r\n                                    </CCardHeader>\r\n                                    <CCardBody >\r\n                                        <CRow>\r\n                                            <CCol style={{ height: \"80px\" }}>\r\n                                                {text.description}\r\n                                            </CCol>\r\n\r\n                                        </CRow>\r\n                                        <CRow>\r\n                                            <CCol>\r\n                                                <p><i>Stock :</i> {`${text.stock} kg`}</p>\r\n                                                <p><i>Used :</i> {`${text.used} kg`}</p>\r\n\r\n                                            </CCol>\r\n                                          \r\n                                        </CRow>\r\n\r\n\r\n                                    </CCardBody>\r\n\r\n                                </CCard>\r\n                            </CCol>\r\n\r\n\r\n                        )\r\n                    })\r\n                }\r\n            </CRow>\r\n\r\n\r\n                    </CContainer>\r\n    )\r\n}\r\n\r\nexport default RawMaterial\r\n"],"sourceRoot":""}