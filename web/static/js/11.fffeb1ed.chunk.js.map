{"version":3,"sources":["apimiddleware/url.js","apimiddleware/postMethod/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","views/invoice/Invoicelist.js"],"names":["baseURL","basePATH","POST_METHOD","payload","url","token","a","console","log","fetch","method","headers","body","JSON","stringify","response","status","json","res","alert","details","message","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","List","props","useState","search","fields","invoiceData","setData","useEffect","id","match","params","query","axios","get","data","user","table","map","u","i","obj","invoice_no","c_id","name","customer","fluid","xs","md","sm","lg","style","margin","padding","marginTop","items","itemsPerPage","pagination","tableFilter","hover","sorter","scopedSlots","item","block","color","onClick","history","push","pathname","state"],"mappings":"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","file":"static/js/11.fffeb1ed.chunk.js","sourcesContent":["export const baseURL = \"http://localhost:8000/api/\"\r\n// \"https://maclay.herokuapp.com/api/\";\r\nexport const basePATH = \"https://maclay.herokuapp.com/\"\r\n\r\n\r\n// export const baseURL = \"http://localhost:8000/api/\"\r\n// // \"https://maclay.herokuapp.com/api/\";\r\n// export const basePATH = \"http://localhost:8000/\"\r\n\r\n","\r\nimport { baseURL } from \"../url\";\r\nconst POST_METHOD = async (payload, url , token)=> {\r\n    console.log(payload,baseURL + `${url}` , 'yes')\r\n    try {\r\n        let response =await  fetch(\r\n            baseURL + `${url}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization' : `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(payload)\r\n            })\r\n            let res;\r\n            console.log(\"respone\" , response)\r\n            if(response.status == 200){\r\n                res = await response.json();\r\n               alert(\"Successfully Added\")\r\n                return res\r\n            }else if(response.status == 401){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 404){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 400){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(res.details[0].message)\r\n            }\r\n            else if(response.status == 202){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(\"Already Exists\")\r\n            }\r\n    }\r\n    catch (error) {\r\n        console.log(\"err\" , error)\r\n        alert(error)\r\n        // console.error(error);\r\n    }\r\n}\r\n\r\n\r\nexport default POST_METHOD;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CCol,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CRow,\r\n    CTabContent,\r\n    CTabPane,\r\n    CCard,\r\n    CCardBody,\r\n    CTabs,\r\n    CCardHeader,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CSelect,\r\n    CContainer,\r\n    CButton,\r\n    CDataTable\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react';\r\nimport POST_METHOD from \"../../apimiddleware/postMethod\";\r\nimport axios from 'axios';\r\nimport { baseURL , basePATH } from '../../apimiddleware/url';\r\nimport { cibSublimeText } from '@coreui/icons';\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst List = (props) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [search, setSearch] = useState(0);\r\n    const [fields] = useState([\"S.No\", \"invoice_no\", \"Customer Id\", \"Name\", \"Invoice\"]);\r\n    const [invoiceData, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"props\" , props);\r\n        let id = false;\r\n        if(props.match.params.id){\r\n            console.log(\"id\" , props.match.params.id);\r\n            id = props.match.params.id\r\n        }\r\n        let query = id == false ? `${baseURL}invoice` : `${baseURL}invoice/${id}`;\r\n        console.log(\"query\" , query); \r\n        \r\n        async function customer() {\r\n            let data = await axios.get(query);\r\n            console.log(\"data\", data);\r\n            if (data.status == 200) {\r\n                let user = data.data;\r\n                let table = []\r\n                user.map((u, i) => {\r\n                    let obj = {\r\n                        \"S.No\": 1 + i,\r\n                        \"invoice_no\": u.invoice_no,\r\n                        \"Customer Id\": u.c_id.c_id,\r\n                        \"Name\": u.c_id.name,\r\n                        \"Invoice\": u.invoice_no,\r\n                        data:u\r\n\r\n                    }\r\n                    table = [...table, obj]\r\n                });\r\n                setData(table);\r\n            }\r\n        }\r\n        customer();\r\n\r\n\r\n\r\n    }, [search])\r\n\r\n    return (\r\n        <CContainer fluid>\r\n           <CRow>\r\n               <CCol xs=\"12\" md=\"12\" sm=\"12\" lg=\"12\" style={{margin:0 , padding:0}}>\r\n\r\n                \r\n            <CCard >\r\n                <CCardHeader>\r\n                    <center><b>Invoices</b></center>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                    {/* <CRow >\r\n                <CCol style={{display:\"flex\" ,justifyContent:\"center\" }}>\r\n                    <CRow style={{display:\"flex\" , justifyContent:\"center\" }}>\r\n                        <CCol style={{padding:0}}>\r\n                        <CInput  value={name} placeholder=\"Search\" onChange={(e)=>setName(e.target.value)}/> \r\n                        \r\n                        </CCol>\r\n                        <CCol style={{ padding:0}}>\r\n                        <CButton onClick={()=> setSearch(search + 1)}>Search</CButton>\r\n                \r\n                        </CCol>\r\n                    </CRow>\r\n                    </CCol>\r\n            </CRow> */}\r\n                    <CRow style={{ marginTop: \"20px\" }}>\r\n                        <CDataTable\r\n                            items={invoiceData}\r\n                            fields={fields}\r\n                            itemsPerPage={25}\r\n                            pagination\r\n                            tableFilter\r\n                            hover\r\n                            sorter\r\n                            scopedSlots={{\r\n\r\n                                \"Invoice\":\r\n                                    (item) => (\r\n                                        <td >\r\n                                            <CCol  >\r\n                                                <CButton block color=\"danger\" onClick={()=> props.history.push({pathname:\"/invoice/view\" ,state:item.data})} >view</CButton>\r\n                                            </CCol>\r\n                                        </td>\r\n                                    ),\r\n                            }}\r\n                        />\r\n\r\n                    </CRow>\r\n                </CCardBody>\r\n            </CCard>\r\n            </CCol>\r\n               </CRow>\r\n\r\n        </CContainer>\r\n    )\r\n}\r\n\r\nexport default List\r\n"],"sourceRoot":""}