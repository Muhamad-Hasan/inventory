{"version":3,"sources":["apimiddleware/url.js","apimiddleware/postMethod/index.js","views/statement/AddStatment.js"],"names":["baseURL","basePATH","POST_METHOD","payload","url","token","a","console","log","fetch","method","headers","body","JSON","stringify","response","status","json","res","alert","details","message","Statement","props","useState","name","setName","selectUser","setSelect","user","setUser","currentDate","setDate","month","setMonth","year","setYear","search","setSearch","description","setDescription","credit","setCredit","submit","axios","post","c_id","parseInt","date","Date","history","goBack","data","useEffect","get","customer","style","height","overflow","xs","id","size","placeholder","value","onChange","e","target","type","onClick","color","marginTop","length","map","u","i","active","_id","href","md","sm","htmlFor","required","display","justifyContent","outline"],"mappings":"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","file":"static/js/19.e6c8d242.chunk.js","sourcesContent":["export const baseURL = \"http://localhost:8000/api/\"\r\n// \"https://maclay.herokuapp.com/api/\";\r\nexport const basePATH = \"https://maclay.herokuapp.com/\"\r\n\r\n\r\n// export const baseURL = \"http://localhost:8000/api/\"\r\n// // \"https://maclay.herokuapp.com/api/\";\r\n// export const basePATH = \"http://localhost:8000/\"\r\n\r\n","\r\nimport { baseURL } from \"../url\";\r\nconst POST_METHOD = async (payload, url , token)=> {\r\n    console.log(payload,baseURL + `${url}` , 'yes')\r\n    try {\r\n        let response =await  fetch(\r\n            baseURL + `${url}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization' : `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(payload)\r\n            })\r\n            let res;\r\n            console.log(\"respone\" , response)\r\n            if(response.status == 200){\r\n                res = await response.json();\r\n               alert(\"Successfully Added\")\r\n                return res\r\n            }else if(response.status == 401){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 404){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 400){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(res.details[0].message)\r\n            }\r\n            else if(response.status == 202){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(\"Already Exists\")\r\n            }\r\n    }\r\n    catch (error) {\r\n        console.log(\"err\" , error)\r\n        alert(error)\r\n        // console.error(error);\r\n    }\r\n}\r\n\r\n\r\nexport default POST_METHOD;","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CCol,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CRow,\r\n    CTabContent,\r\n    CTabPane,\r\n    CCard,\r\n    CCardBody,\r\n    CTabs,\r\n    CCardHeader,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CSelect,\r\n    CContainer,\r\n    CButton,\r\n    CListGroupItem,\r\n    CInputGroup,\r\n    CInputGroupAppend,\r\n    CListGroup\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react';\r\nimport POST_METHOD from \"../../apimiddleware/postMethod\";\r\nimport axios from 'axios';\r\nimport { baseURL } from '../../apimiddleware/url';\r\n\r\n\r\nconst Statement = (props) => {\r\n\r\n    const [c_id, setId] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [remarks, setRemarks] = useState('');\r\n    const [discount, setDiscount] = useState('');\r\n    const [balance, setBalance] = useState('');\r\n    const [selectUser, setSelect] = useState(\"\")\r\n    const [user, setUser] = useState([])\r\n    const [currentDate, setDate] = useState();\r\n    const [month, setMonth] = useState('');\r\n    const [year, setYear] = useState('');\r\n    const [search, setSearch] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [credit, setCredit] = useState('');\r\n\r\n\r\n    const submit = async () => {\r\n        try {\r\n            let data = await axios.post(`${baseURL}statement`, {\r\n                c_id: selectUser,\r\n                description: description,\r\n                credit: parseInt(credit),\r\n                date: new Date(year , month-1 , currentDate)\r\n            })\r\n            if (data.status == 200) {\r\n                alert(\"Successfully Added\");\r\n                props.history.goBack();\r\n\r\n            }\r\n        } catch (err) {\r\n            alert(err.response.data)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function customer() {\r\n            let data = name ? await axios.get(`${baseURL}customer?name=${name}`) : await axios.get(`${baseURL}customer`);\r\n            console.log(\"data\", data);\r\n            if (data.status == 200) {\r\n                setUser(data.data);\r\n            }\r\n        }\r\n        customer();\r\n\r\n\r\n\r\n    }, [search])\r\n\r\n    return (\r\n        <CContainer>\r\n            <CCard style={{ height: \"400px\" }}>\r\n                <CCardHeader>\r\n                    <center><b>Select User</b></center>\r\n                </CCardHeader>\r\n                <CCardBody style={{ overflow: \"scroll\" }}>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CInputGroup>\r\n                                <CInput id=\"appendedInputButton\" size=\"16\" placeholder=\"Search customer by name\" value={name} onChange={e => setName(e.target.value)} type=\"text\" />\r\n                                <CInputGroupAppend>\r\n                                    <CButton onClick={() => setSearch(true)} color=\"secondary\">Search</CButton>\r\n                                </CInputGroupAppend>\r\n                            </CInputGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\" style={{ marginTop: \"30px \" }}>\r\n                            <CListGroup>\r\n                                {\r\n                                    user && user.length > 0 &&\r\n                                    user.map((u, i) => {\r\n                                        let active = selectUser == u._id ? true : false;\r\n                                        console.log(\"active\", active);\r\n                                        return (\r\n                                            <CListGroupItem href=\"#\" active={active}>\r\n                                                <CRow onClick={() => setSelect(u._id)}>\r\n                                                    <CCol>\r\n                                                        {u.c_id}\r\n                                                    </CCol>\r\n                                                    <CCol>\r\n                                                        {u.name}\r\n                                                    </CCol>\r\n\r\n                                                </CRow>\r\n                                            </CListGroupItem>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n\r\n                            </CListGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard xs=\"12\" md=\"12\" sm=\"12\">\r\n                <CCardHeader>\r\n                    <center><b>Add Credit</b></center>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Description</CLabel>\r\n                                <CInput id=\"name\" placeholder=\"Enter Description\" required value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Credit</CLabel>\r\n                                <CInput id=\"name\" placeholder=\"Enter Credit\" required value={credit} onChange={(e) => setCredit(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"4\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccmonth\">Date</CLabel>\r\n                                <CInput id=\"ccmonth\" value={currentDate} onChange={(e) => setDate(e.target.value)} />\r\n\r\n                            </CFormGroup>\r\n                        </CCol>\r\n\r\n                        <CCol xs=\"4\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccmonth\">Month</CLabel>\r\n                                <CInput id=\"ccmonth\" value={month} onChange={(e) => setMonth(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                        <CCol xs=\"4\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccyear\">Year</CLabel>\r\n                                <CInput id=\"ccmonth\" value={year} onChange={(e) => setYear(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n\r\n\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\" style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                            <CButton onClick={() => submit()} outline >Submit</CButton>\r\n                        </CCol>\r\n                    </CRow>\r\n\r\n                </CCardBody>\r\n            </CCard>\r\n        </CContainer>\r\n    )\r\n}\r\n\r\nexport default Statement\r\n"],"sourceRoot":""}