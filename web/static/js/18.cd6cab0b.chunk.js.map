{"version":3,"sources":["apimiddleware/url.js","apimiddleware/postMethod/index.js","views/inventory/Sales.js"],"names":["baseURL","basePATH","POST_METHOD","payload","url","token","a","console","log","fetch","method","headers","body","JSON","stringify","response","status","json","res","alert","details","message","Sales","props","useState","Product_fields","match","params","id","p_id","user","setUser","selectUser","setSelect","search","setSearch","name","setName","sale","setSale","amount","setAmount","date","addDays","Date","from","setFrom","to","setTo","total_quantity","setTotalQuantity","useEffect","obj","axios","post","sales","data","arr","am","tq","map","text","index","c_id","quantity","toFixed","ctns","createdAt","toLocaleDateString","parseFloat","fetchData","get","customer","lg","style","width","display","flexDirection","margin","placeholder","value","onChange","e","target","onClick","xs","marginTop","height","overflow","length","u","i","active","_id","href","justifyContent","textAlign","format","items","fields","striping","fontSize"],"mappings":"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","file":"static/js/18.cd6cab0b.chunk.js","sourcesContent":["export const baseURL = \"http://localhost:8000/api/\"\r\n// \"https://maclay.herokuapp.com/api/\";\r\nexport const basePATH = \"https://maclay.herokuapp.com/\"\r\n\r\n\r\n// export const baseURL = \"http://localhost:8000/api/\"\r\n// // \"https://maclay.herokuapp.com/api/\";\r\n// export const basePATH = \"http://localhost:8000/\"\r\n\r\n","\r\nimport { baseURL } from \"../url\";\r\nconst POST_METHOD = async (payload, url , token)=> {\r\n    console.log(payload,baseURL + `${url}` , 'yes')\r\n    try {\r\n        let response =await  fetch(\r\n            baseURL + `${url}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization' : `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(payload)\r\n            })\r\n            let res;\r\n            console.log(\"respone\" , response)\r\n            if(response.status == 200){\r\n                res = await response.json();\r\n               alert(\"Successfully Added\")\r\n                return res\r\n            }else if(response.status == 401){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 404){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 400){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(res.details[0].message)\r\n            }\r\n            else if(response.status == 202){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(\"Already Exists\")\r\n            }\r\n    }\r\n    catch (error) {\r\n        console.log(\"err\" , error)\r\n        alert(error)\r\n        // console.error(error);\r\n    }\r\n}\r\n\r\n\r\nexport default POST_METHOD;","\r\nimport React, { useState, useEffect } from 'react'\r\nimport {\r\n    CCol,\r\n    CRow,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CContainer,\r\n    CButton,\r\n    CDataTable ,\r\n     CListGroup ,\r\n     CListGroupItem,\r\n     CDropdownItem , \r\n     CDropdown,\r\n     CDropdownToggle , \r\n     CDropdownMenu , \r\n\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react';\r\nimport POST_METHOD from \"../../apimiddleware/postMethod\";\r\nimport { baseURL } from '../../apimiddleware/url';\r\nimport axios from \"axios\"\r\nimport DatePicker from 'react-date-picker';\r\nimport date from \"date-and-time\"\r\n\r\n\r\nconst Sales = (props) => {\r\n    console.log(\"props\" , props);\r\n    const [Product_fields] = useState([\"S.NO\" ,\"Customer Name\"  ,\"Product Name\" , \"Date\",\"Cartons\" , \"Quantity\" , \"Total\"  ]);\r\n    const [c_id  , setCId] = useState();\r\n    const [p_id  , setPId] = useState(props.match.params.id);\r\n    const [user , setUser] = useState([])\r\n    const [selectUser  , setSelect] = useState();\r\n    const [search ,setSearch] = useState()\r\n    const [name , setName] = useState()\r\n    const [sale , setSale] = useState([]);\r\n    const [amount , setAmount] = useState();\r\n    const [from , setFrom] = useState(date.addDays(new Date() , -15));\r\n    const [to ,setTo] = useState(new Date());\r\n    const [total_quantity , setTotalQuantity] = useState()\r\n    \r\n    \r\n    useEffect(()=>{\r\n\r\n        async function fetchData(){\r\n            let obj = {\r\n                p_id  , \r\n                from , to\r\n            }\r\n            if(selectUser){\r\n                obj[\"c_id\"] = selectUser\r\n            }\r\n            console.log(\"c_Id\" , obj , );\r\n            let sale = await axios.post(`${baseURL}product/sale` ,obj)\r\n            console.log(\"data\" , sale);\r\n            if(sale.status == 200){\r\n                let sales = sale.data\r\n                let arr = [] \r\n                let am = 0\r\n                let tq = 0;\r\n                sales.map((text , index)=>{\r\n                    let obj  = {\r\n                        \"S.NO\" : index+1,\r\n                        \"Customer Name\" : text.c_id.name,\r\n                        \"Product Name\" : text.p_id.name,\r\n                        \"Quantity\" : text.quantity.toFixed(2),\r\n                        \"Total\" : text.amount.toFixed(2),\r\n                        \"Cartons\":text.ctns.toFixed(2),\r\n                        \"Date\" : new Date(text.createdAt).toLocaleDateString()\r\n                    }\r\n                    am = am + text.amount;\r\n                    tq = parseFloat(tq) + parseFloat(text.quantity).toFixed(2)\r\n                    arr = [ ...arr  , obj ]\r\n                })\r\n                console.log(\"arr\" , arr);\r\n                setAmount(am)\r\n                setSale(arr);\r\n                console.log(\"tq\" , tq);\r\n                setTotalQuantity(tq)\r\n            \r\n        }\r\n    }\r\n        fetchData()\r\n        \r\n    }, [selectUser , from  , to])\r\n\r\n    useEffect(() => {\r\n        async function customer() {\r\n            let data = name ? await axios.get(`${baseURL}customer?name=${name}`) : await axios.get(`${baseURL}customer`);\r\n            console.log(\"data\", data);\r\n            if (data.status == 200) {\r\n\r\n                setUser(data.data);\r\n            }\r\n        }\r\n        customer();\r\n\r\n\r\n\r\n    }, [search])\r\n    console.log(\"ammount\" , amount);\r\n   \r\n    return (\r\n        <CContainer lg=\"12\">\r\n                  \r\n            <CRow>\r\n            <CCard  style={{width:\"100%\"}}lg=\"12\">\r\n                                            <CCardHeader>\r\n                                                <center><b>Sales</b></center>   \r\n                                            </CCardHeader>\r\n                                            <CCardBody>\r\n                                                <CRow style={{display:\"flex\" }}> \r\n                                                    <div style={{display:\"flex\" , flexDirection:\"row\" , margin : \"auto\"}}>\r\n                                                    <CInput placeholder=\"customer name\" style={{width:\"100%\"}} value={name} onChange={(e)=>setName(e.target.value) } />\r\n                                                    <CButton onClick={()=> setSearch(!search)}> Search</CButton>\r\n                                                    <CButton onClick={()=>setSelect(\"\")}> Clear</CButton>\r\n                                                \r\n                                                    </div>\r\n                                                </CRow>\r\n                                                {\r\n                                                    \r\n                                                  <CRow>\r\n                                                    <CCol xs=\"12\" style={{ marginTop: \"30px\" , height:\"300px\" , overflow:\"scroll\" }}>\r\n                                                        <CListGroup>\r\n                                                            {\r\n                                                                user && user.length > 0 &&\r\n                                                                user.map((u, i) => {\r\n                                                                    let active = selectUser == u._id ? true : false;\r\n                                                                    console.log(\"active\", active);\r\n                                                                    return (\r\n                                                                        <CListGroupItem onClick={() => setSelect(u._id)} href=\"#\" active={active}>\r\n                                                                            <CRow onClick={() => setSelect(u._id)}>\r\n                                                                                <CCol>\r\n                                                                                    {u.c_id}\r\n                                                                                </CCol>\r\n                                                                                <CCol>\r\n                                                                                    {u.name}\r\n                                                                                </CCol>\r\n\r\n                                                                            </CRow>\r\n                                                                        </CListGroupItem>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n\r\n\r\n                                                        </CListGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                                }\r\n                                           \r\n                                                {/* {\r\n                                                    page == \"product\" && \r\n                                                    <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CFormGroup>\r\n                                                            <CLabel htmlFor=\"name\">Name</CLabel>\r\n                                                            <CInput id=\"name\" placeholder=\"Enter Material Name\" required value={name} onChange={(e)=> setName(e.target.value)}/>\r\n                                                        </CFormGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                                    \r\n                                                } */}\r\n                                                <CRow>\r\n            <CCol style={{display :\"flex\" ,flexDirection:\"row\" , justifyContent:\"space-around\"}}>\r\n              <div style={{textAlign:\"center\"}}>\r\n                  <h3>From</h3>\r\n                  <DatePicker\r\n                  \r\n                  format=\"dd/MM/yyyy\"\r\n                  onChange={setFrom}\r\n                  value={from}\r\n                />\r\n              </div>\r\n              <div >\r\n                  <h3 style={{textAlign:\"center\"}}>To</h3>\r\n                  <DatePicker\r\n                  \r\n                  format=\"dd/MM/yyyy\"\r\n                  onChange={setTo}\r\n                  value={to}\r\n                />\r\n              </div>\r\n           \r\n              \r\n              \r\n            </CCol>\r\n\r\n          </CRow>\r\n          \r\n                                               \r\n                                            \r\n                                                <CRow style={{width:\"100%\" , marginTop :\"20px\"}} >\r\n                                               \r\n                                                        {/* <CCol style={{ textAlign:\"flex-end\"}}> */}\r\n{/*                                                             \r\n                                                        <CCol style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10px\" }}  xs=\"2\">\r\n                                                                                            <CDropdown >\r\n                                                                                                <CDropdownToggle color=\"info\">\r\n                                                                                                    {time_period}\r\n                                                                                                </CDropdownToggle>\r\n                                                                                                <CDropdownMenu>\r\n                                                                                                    <CDropdownItem onClick={() => setPeriod(\"this_month\")}>This Month</CDropdownItem>\r\n                                                                                                    <CDropdownItem onClick={() => setPeriod(\"North\")}>North</CDropdownItem>\r\n                                                                                                </CDropdownMenu>\r\n                                                                                            </CDropdown>\r\n                                                                                        </CCol> */}\r\n                                                        {/* </CCol> */}\r\n                                                   <CDataTable\r\n                                                        items={sale}\r\n                                                        fields={ Product_fields}\r\n                                                        striping\r\n                                                        />\r\n                                                   \r\n                                                </CRow>\r\n                                                <CRow>\r\n                                                    <CCol style={{display:\"flex\" , justifyContent:\"flex-end\"}}>\r\n                                                    <div  style={{fontSize:\"16px\"}}>\r\n                                                        Total Amount: {amount && amount.toFixed(2)}\r\n                                                        <br/>\r\n                                                        Total Quantity: {total_quantity }\r\n                                                        <br/>\r\n                                                        \r\n                                                    </div>\r\n                                                    </CCol>\r\n                                                    \r\n                                                </CRow>\r\n                                                \r\n                                            </CCardBody>\r\n                                        </CCard>\r\n            </CRow>\r\n\r\n        </CContainer>\r\n    )\r\n}\r\n\r\nexport default Sales\r\n"],"sourceRoot":""}