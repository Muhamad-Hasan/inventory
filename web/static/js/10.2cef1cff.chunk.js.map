{"version":3,"sources":["apimiddleware/url.js","apimiddleware/postMethod/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","views/invoice/CreateInvoice.js"],"names":["baseURL","basePATH","POST_METHOD","payload","url","token","a","console","log","fetch","method","headers","body","JSON","stringify","response","status","json","res","alert","details","message","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","CreateInvoice","props","date","Date","useState","user","setUser","getDate","getMonth","getFullYear","name","setName","quantity","setQuantity","search","setSearch","selectUser","setSelect","searchProduct","product","setProduct","productTable","sq","setSQ","st","setST","sa","setSA","bilty_no","setBiltyNo","bilty_amount","setBiltyAmount","note","setNote","return_amount","setReturnAmount","type","setType","region","setRegion","discount","setDiscount","fields","createInvoice","products","filter","f","selected","obj","parseInt","c_id","Axios","post","data","history","push","useEffect","axios","get","customer","setDetails","xs","md","className","variant","id","size","placeholder","value","onChange","e","target","onClick","color","style","marginTop","length","map","u","i","active","_id","href","items","tableFilter","hover","sorter","scopedSlots","item","product_size","product_color","carton_size","index","shape","position","indexOf","newDetails","slice","splice","toggleDetails","includes","show","htmlFor","disabled","toFixed","stock","parseFloat","all_products","forEach","p","undefined","unselect","c_q","q_type","toLowerCase","select","required","display","justifyContent","block"],"mappings":"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","file":"static/js/10.2cef1cff.chunk.js","sourcesContent":["export const baseURL = \"http://localhost:8000/api/\"\r\n// \"https://maclay.herokuapp.com/api/\";\r\nexport const basePATH = \"https://maclay.herokuapp.com/\"\r\n\r\n\r\n// export const baseURL = \"http://localhost:8000/api/\"\r\n// // \"https://maclay.herokuapp.com/api/\";\r\n// export const basePATH = \"http://localhost:8000/\"\r\n\r\n","\r\nimport { baseURL } from \"../url\";\r\nconst POST_METHOD = async (payload, url , token)=> {\r\n    console.log(payload,baseURL + `${url}` , 'yes')\r\n    try {\r\n        let response =await  fetch(\r\n            baseURL + `${url}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization' : `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(payload)\r\n            })\r\n            let res;\r\n            console.log(\"respone\" , response)\r\n            if(response.status == 200){\r\n                res = await response.json();\r\n               alert(\"Successfully Added\")\r\n                return res\r\n            }else if(response.status == 401){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 404){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 400){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(res.details[0].message)\r\n            }\r\n            else if(response.status == 202){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(\"Already Exists\")\r\n            }\r\n    }\r\n    catch (error) {\r\n        console.log(\"err\" , error)\r\n        alert(error)\r\n        // console.error(error);\r\n    }\r\n}\r\n\r\n\r\nexport default POST_METHOD;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CCol,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CRow,\r\n    CTabContent,\r\n    CTabPane,\r\n    CCard,\r\n    CCardBody,\r\n    CTabs,\r\n    CCardHeader,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CSelect,\r\n    CContainer,\r\n    CButton,\r\n    CInputGroup,\r\n    CInputGroupAppend,\r\n    CListGroup,\r\n    CListGroupItem,\r\n    CDataTable,\r\n    CBadge,\r\n    CCollapse,\r\n    CTextarea,\r\n    CDropdown,\r\n    CDropdownItem,\r\n    CDropdownDivider,\r\n    CDropdownMenu,\r\n    CDropdownToggle\r\n} from '@coreui/react'\r\nimport POST_METHOD from \"../../apimiddleware/postMethod\";\r\nimport Axios from 'axios';\r\nimport { baseURL } from '../../apimiddleware/url';\r\n\r\n// import {\r\n//     CButton,\r\n//     CCard,\r\n//     CCardBody,\r\n//     CCardFooter,\r\n//     CCardHeader,\r\n//     CCol,\r\n//     CCollapse,\r\n//     CDropdownItem,\r\n//     CDropdownMenu,\r\n//     CDropdownToggle,\r\n//     CFade,\r\n//     CForm,\r\n//     CFormGroup,\r\n//     CFormText,\r\n//     CValidFeedback,\r\n//     CInvalidFeedback,\r\n//     CTextarea,\r\n//     CInput,\r\n//     CInputFile,\r\n//     CInputCheckbox,\r\n//     CInputRadio,\r\n//     CInputGroup,\r\n//     CInputGroupAppend,\r\n//     CInputGroupPrepend,\r\n//     CDropdown,\r\n//     CInputGroupText,\r\n//     CLabel,\r\n//     CSelect,\r\n//     CRow\r\n//   } from '@coreui/react'\r\nimport axios from \"axios\"\r\n\r\n\r\nconst CreateInvoice = (props) => {\r\n    let date = new Date();\r\n    const [user, setUser] = useState([]);\r\n    const [currentDate, setDate] = useState(date.getDate());\r\n    const [month, setMonth] = useState(date.getMonth() + 1);\r\n    const [year, setYear] = useState(date.getFullYear());\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState(\"\");\r\n    const [quantity, setQuantity] = useState();\r\n    const [size, setSize] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [product_id, setId] = useState('');\r\n    const [product_size, setProductSize] = useState('');\r\n    const [product_color, setProductColor] = useState('');\r\n    const [search, setSearch] = useState(false);\r\n    const [selectUser, setSelect] = useState(\"\")\r\n    const [searchProduct, setProductSearch] = useState(false)\r\n    const [product, setProduct] = useState([]);\r\n    const [selectProduct, setP] = useState({})\r\n    const [productTable, setPT] = useState([]);\r\n    const [sq, setSQ] = useState();\r\n    const [st, setST] = useState(\"\");\r\n    const [sa, setSA] = useState();\r\n    const [invoice_name, setInvoiceName] = useState(\"\");\r\n    const [bilty_no, setBiltyNo] = useState(\"\");\r\n    const [bilty_amount, setBiltyAmount] = useState(0);\r\n    const [transport_name, setTransportName] = useState(\"\");\r\n    const [transport_no, setTransportNo] = useState([\"\", \"\"]);\r\n    const [transport_address, setTransportAddress] = useState([\"\", \"\"]);\r\n    const [note, setNote] = useState(\"\");\r\n    const [return_amount, setReturnAmount] = useState()\r\n    const [type, setType] = useState(\"large\")\r\n    const [region, setRegion] = useState(\"South\");\r\n    const [discount , setDiscount] = useState();\r\n    const [loading , setLoading] = useState(false)\r\n\r\n\r\n    const [fields] = useState([\"product_id\", \"name\", \"product_size\", \"product_color\",\"Carton size\" , \"quantity\", \"status\", \"show_details\"])\r\n\r\n    const select = (i , c_q) => {\r\n        console.log(\"log\" ,i , c_q , quantity);\r\n        if(quantity<1){\r\n            alert(\"Quantity must be greater than 1\")\r\n            return\r\n        }\r\n        if (!quantity) {\r\n            alert(\"Empty Quantity is not allowed\")\r\n            return\r\n        }if(quantity > c_q )\r\n        {\r\n            alert(`This product have only ${c_q} items in stock`);\r\n            return\r\n            \r\n        }\r\n        let all_products = []\r\n        product.forEach(p=>{\r\n            if(p._id == i){\r\n                all_products =  [...all_products ,{...p ,quantity: parseFloat(quantity),discount : parseFloat(discount) ,q_type : type.toLowerCase() , region:region.toLowerCase() ,  selected: true, st, sq, sa} ]\r\n            }else{\r\n                all_products  = [...all_products , p] \r\n            }\r\n            \r\n        })\r\n       \r\n\r\n\r\n        // product[i] = { ...product[i], quantity: parseFloat(quantity),discount : parseFloat(discount) ,q_type : type.toLowerCase() , region:region.toLowerCase() ,  selected: true, st, sq, sa };\r\n        setProduct(all_products)\r\n        setQuantity();\r\n        setDiscount()\r\n        setType(\"large\")\r\n        setRegion(\"South\")\r\n        setST(\"\")\r\n        setSQ()\r\n        setSA()\r\n        console.log(\"p\", all_products);\r\n        \r\n    }\r\n\r\n    const unselect = (i) => {\r\n        // product[i] = { ...product[i], quantity: undefined, selected: false };\r\n        let all_products = []\r\n        product.forEach(p=>{\r\n            if(p._id != i){\r\n                all_products =  [...all_products ,{...p ,quantity: undefined,selected :false } ]\r\n            }            \r\n        })\r\n        \r\n        setProduct(all_products)\r\n        console.log(\"p\", product);\r\n    }\r\n\r\n    \r\n\r\n   \r\n    const createInvoice = async () => {\r\n        try {\r\n            let products = product.filter(f => f.selected == true);\r\n            console.log(\"fiklter\" , products);\r\n            let obj = {}\r\n            if (parseInt(return_amount) > 0) {\r\n                obj = {\r\n                    c_id: selectUser,\r\n                    bilty_no, bilty_amount,\r\n                    note,\r\n                    products: products,\r\n                    return_amount: return_amount,\r\n                    type: \"return\"\r\n\r\n                };\r\n            } else {\r\n                obj = {\r\n                    c_id: selectUser,\r\n                    bilty_no, bilty_amount,\r\n                    note,\r\n                    products: products,\r\n                    type: \"normal\"\r\n\r\n                };\r\n            }\r\n            console.log('product', products);\r\n            let data = await Axios.post(`${baseURL}invoice`, obj);\r\n            console.log(\"dta\" , data);\r\n            alert(\"Successfully Created\")\r\n            props.history.push(\"/invoice/list\")\r\n        } catch (err) {\r\n            // alert(err.response)\r\n            if(err.response.status){\r\n                alert(err.response && err.response.data)\r\n            }\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n    console.log(\"table\", productTable)\r\n    useEffect(() => {\r\n        async function customer() {\r\n            let data = name ? await axios.get(`${baseURL}customer?name=${name}`) : await axios.get(`${baseURL}customer`);\r\n            console.log(\"data\", data);\r\n            if (data.status == 200) {\r\n\r\n                setUser(data.data);\r\n            }\r\n        }\r\n        customer();\r\n\r\n\r\n\r\n    }, [search])\r\n\r\n    useEffect(() => {\r\n        async function customer() {\r\n            let data = name ? await axios.get(`${baseURL}product?name=${name}`) : await axios.get(`${baseURL}product`);\r\n            console.log(\"data\", data);\r\n            if (data.status == 200) {\r\n                setProduct(data.data);\r\n            }\r\n        }\r\n        customer();\r\n\r\n\r\n\r\n    }, [searchProduct])\r\n\r\n    const [details, setDetails] = useState([])\r\n\r\n    const toggleDetails = (index) => {\r\n        const position = details.indexOf(index)\r\n        let newDetails = details.slice()\r\n        if (position !== -1) {\r\n            newDetails.splice(position, 1)\r\n        } else {\r\n            newDetails = [...details, index]\r\n        }\r\n        setDetails(newDetails)\r\n        setQuantity(0)\r\n    }\r\n    return (\r\n        <CContainer>\r\n            <CRow>\r\n                <CCol xs=\"12\" md=\"12\" className=\"mb-4\">\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            <center>\r\n                                <b >Create Invoice</b>\r\n\r\n                            </center>\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                            <CTabs>\r\n                                <CNav variant=\"tabs\">\r\n                                    <CNavItem>\r\n                                        <CNavLink>\r\n                                            <b>Select Customer</b>\r\n                                        </CNavLink>\r\n                                    </CNavItem>\r\n                                    <CNavItem>\r\n                                        <CNavLink>\r\n                                            <b>Add Items</b>\r\n                                        </CNavLink>\r\n                                    </CNavItem>\r\n                                    <CNavItem>\r\n                                        <CNavLink>\r\n                                            <b>Other Details</b>\r\n                                        </CNavLink>\r\n                                    </CNavItem>\r\n\r\n                                </CNav>\r\n                                <CTabContent>\r\n                                    <CTabPane>\r\n\r\n                                        <CCard>\r\n                                            <CCardHeader>\r\n\r\n                                            </CCardHeader>\r\n                                            <CCardBody>\r\n                                                <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CInputGroup>\r\n                                                            <CInput id=\"appendedInputButton\" size=\"16\" placeholder=\"Search customer by name\" value={name} onChange={e => setName(e.target.value)} type=\"text\" />\r\n                                                            <CInputGroupAppend>\r\n                                                                <CButton onClick={() => setSearch(!search)} color=\"secondary\">Search</CButton>\r\n                                                            </CInputGroupAppend>\r\n                                                        </CInputGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                                <CRow>\r\n                                                    <CCol xs=\"12\" style={{ marginTop: \"30px \" }}>\r\n                                                        <CListGroup>\r\n                                                            {\r\n                                                                user && user.length > 0 &&\r\n                                                                user.map((u, i) => {\r\n                                                                    let active = selectUser == u._id ? true : false;\r\n                                                                    console.log(\"active\", active);\r\n                                                                    return (\r\n                                                                        <CListGroupItem onClick={() => setSelect(u._id)} href=\"#\" active={active}>\r\n                                                                            <CRow onClick={() => setSelect(u._id)}>\r\n                                                                                <CCol>\r\n                                                                                    {u.c_id}\r\n                                                                                </CCol>\r\n                                                                                <CCol>\r\n                                                                                    {u.name}\r\n                                                                                </CCol>\r\n\r\n                                                                            </CRow>\r\n                                                                        </CListGroupItem>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n\r\n\r\n                                                        </CListGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n\r\n\r\n\r\n\r\n                                    </CTabPane>\r\n                                    <CTabPane>\r\n\r\n                                        <CCard>\r\n                                            <CCardHeader>\r\n\r\n                                            </CCardHeader>\r\n                                            <CCardBody>\r\n                                                <CRow>\r\n                                                    <CCol>\r\n                                                        <CDataTable\r\n                                                            items={product}\r\n                                                            fields={fields}\r\n                                                            // columnFilter\r\n                                                            tableFilter\r\n                                                            hover\r\n                                                            sorter\r\n                                                            scopedSlots={{\r\n\r\n                                                                \"product_size\":\r\n                                                                    (item) => (\r\n                                                                        <td>{item.product_size ? item.product_size : \"Not Found\"}</td>\r\n                                                                    ),\r\n                                                                \"product_color\":\r\n                                                                    (item) => (\r\n                                                                        <td>{item.product_color ? item.product_color : \"Not Found\"}</td>\r\n                                                                    ),\r\n                                                                \"Carton size\":\r\n                                                                (item) => (\r\n                                                                    <td><center>{item.carton_size}</center></td>\r\n                                                                ),\r\n                                                                \"quantity\":\r\n                                                                    (item) => (\r\n                                                                        <td><center>{item.quantity ? item.quantity : \"Not Selected\"}</center></td>\r\n                                                                    ),\r\n                                                                'status':\r\n                                                                    (item) => (\r\n                                                                        <td>\r\n                                                                            <center>\r\n                                                                                <CBadge color={item && item.selected ? \"success\" : \"secondary\"}>\r\n                                                                                    {item && item.selected ? \"Selected\" : \"Pending\"}\r\n                                                                                </CBadge>\r\n                                                                            </center>\r\n\r\n                                                                        </td>\r\n                                                                    ),\r\n                                                                'show_details':\r\n                                                                    (item, index) => {\r\n                                                                        return (\r\n                                                                            <td className=\"py-2\">\r\n                                                                                <center>\r\n                                                                                    <CButton\r\n                                                                                        color=\"primary\"\r\n                                                                                        variant=\"outline\"\r\n                                                                                        shape=\"square\"\r\n                                                                                        size=\"sm\"\r\n                                                                                        onClick={() => { toggleDetails(index) }}\r\n                                                                                    >\r\n                                                                                        {details.includes(index) ? 'Hide' : 'Show'}\r\n                                                                                    </CButton>\r\n                                                                                </center>\r\n                                                                            </td>\r\n                                                                        )\r\n                                                                    },\r\n                                                                'details':\r\n                                                                    (item, index) => {\r\n                                                                        console.log(\"item\" , item);\r\n                                                                        return (\r\n                                                                            <CCollapse show={details.includes(index)}>\r\n                                                                                <CCardBody>\r\n                                                                                    {/* { !item.selected &&\r\n                                                <> */}\r\n                                                                                    <CRow>\r\n                                                                                        <CCol xs=\"12\">\r\n                                                                                            <CFormGroup>\r\n                                                                                                <CLabel htmlFor=\"ccnumber\">Quantity</CLabel>\r\n                                                                                                <CInput disabled={item.selected} id=\"ccnumber\" type=\"number\" placeholder=\"Product Quantity\" value={quantity} onChange={(e) => setQuantity(e.target.value)} />\r\n                                                                                            </CFormGroup>\r\n                                                                                        </CCol>\r\n                                                                                        {/* <CCol style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10px\" }} xs=\"2\">\r\n                                                                                            <CDropdown >\r\n                                                                                                <CDropdownToggle color=\"info\">\r\n                                                                                                    {type}\r\n                                                                                                </CDropdownToggle>\r\n                                                                                                <CDropdownMenu>\r\n                                                                                                    <CDropdownItem onClick={() => setType(\"large\")}>Large</CDropdownItem>\r\n                                                                                                    <CDropdownItem onClick={() => setType(\"small\")}>Small</CDropdownItem>\r\n                                                                                                </CDropdownMenu>\r\n                                                                                            </CDropdown>\r\n                                                                                        </CCol> */}\r\n                                                                                    </CRow>\r\n                                                                                    <CRow>\r\n                                                                                        <CCol xs=\"12\">\r\n                                                                                            <CFormGroup>\r\n                                                                                                <CLabel htmlFor=\"ccnumber\">Discount</CLabel>\r\n                                                                                                <CInput disabled={item.selected} id=\"ccnumber\" type=\"number\" placeholder=\"Discount in percent\" value={discount} onChange={(e) => setDiscount(e.target.value)} />\r\n                                                                                            </CFormGroup>\r\n                                                                                        </CCol>\r\n                                                                                        {/* <CCol style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10px\" }}  xs=\"2\" lg=\"2\">\r\n                                                                                            <CDropdown >\r\n                                                                                                <CDropdownToggle color=\"info\">\r\n                                                                                                    {region}\r\n                                                                                                </CDropdownToggle>\r\n                                                                                                <CDropdownMenu>\r\n                                                                                                    <CDropdownItem onClick={() => setRegion(\"South\")}>South</CDropdownItem>\r\n                                                                                                    <CDropdownItem onClick={() => setRegion(\"North\")}>North</CDropdownItem>\r\n                                                                                                </CDropdownMenu>\r\n                                                                                            </CDropdown>\r\n                                                                                        </CCol> */}\r\n                                                                                        \r\n                                                                                    </CRow>\r\n                                                                                    <CRow>\r\n                                                                                        <CCol xs=\"4\">\r\n                                                                                            <CFormGroup>\r\n                                                                                                <CLabel htmlFor=\"ccmonth\">Carton Size</CLabel>\r\n                                                                                                <CInput type=\"number\" disabled={item.selected} value={item.carton_size.toFixed(2)}  />\r\n\r\n                                                                                            </CFormGroup>\r\n                                                                                        </CCol>\r\n\r\n                                                                                        <CCol xs=\"4\">\r\n                                                                                            <CFormGroup>\r\n                                                                                                <CLabel htmlFor=\"ccmonth\">Cartons</CLabel>\r\n                                                                                                <CInput value={item.stock.toFixed(2)} disabled={item.selected}  />\r\n                                                                                            </CFormGroup>\r\n                                                                                        </CCol>\r\n                                                                                        <CCol xs=\"4\">\r\n                                                                                            <CFormGroup>\r\n                                                                                                <CLabel htmlFor=\"ccyear\">Quantity</CLabel>\r\n                                                                                                <CInput type=\"number\" disabled={item.selected} value={(parseFloat(item.carton_size) * parseFloat(item.stock)).toFixed(2) }  />\r\n                                                                                            </CFormGroup>\r\n                                                                                        </CCol>\r\n                                                                                    </CRow>\r\n                                                                                  \r\n                                                                                    {/* <CRow>\r\n                                                                                        <CCol xs=\"4\">\r\n                                                                                            <CFormGroup>\r\n                                                                                                <CLabel htmlFor=\"ccmonth\">Scheme Quantity</CLabel>\r\n                                                                                                <CInput type=\"number\" disabled={item.selected} value={sq} onChange={(e) => setSQ(e.target.value)} />\r\n\r\n                                                                                            </CFormGroup>\r\n                                                                                        </CCol>\r\n\r\n                                                                                        <CCol xs=\"4\">\r\n                                                                                            <CFormGroup>\r\n                                                                                                <CLabel htmlFor=\"ccmonth\">Scheme Type</CLabel>\r\n                                                                                                <CInput value={st} disabled={item.selected} onChange={(e) => setST(e.target.value)} />\r\n                                                                                            </CFormGroup>\r\n                                                                                        </CCol>\r\n                                                                                        <CCol xs=\"4\">\r\n                                                                                            <CFormGroup>\r\n                                                                                                <CLabel htmlFor=\"ccyear\">Scheme Amount</CLabel>\r\n                                                                                                <CInput type=\"number\" disabled={item.selected} value={sa} onChange={(e) => setSA(e.target.value)} />\r\n                                                                                            </CFormGroup>\r\n                                                                                        </CCol>\r\n                                                                                    </CRow> */}\r\n                                                                                  \r\n                                                                                    {\r\n                                                                                        !item.selected ?\r\n                                                                                            <CButton onClick={() => select(item._id ,item.carton_size * item.stock )} size=\"sm\" color=\"info\">\r\n                                                                                                Select\r\n                                                                                               \r\n                  </CButton>\r\n                                                                                            : <CButton size=\"sm\" onClick={() => unselect(item._id)} color=\"danger\" className=\"ml-1\">\r\n                                                                                                Unselect\r\n                </CButton>\r\n                                                                                    }\r\n\r\n                                                                                </CCardBody>\r\n                                                                            </CCollapse>\r\n                                                                        )\r\n                                                                    }\r\n                                                            }}\r\n                                                        />\r\n                                                    </CCol>\r\n\r\n                                                </CRow>\r\n\r\n\r\n\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n\r\n                                    </CTabPane>\r\n                                    <CTabPane>\r\n                                        <CCard>\r\n                                            <CCardHeader>\r\n\r\n                                            </CCardHeader>\r\n                                            <CCardBody>\r\n\r\n                                                <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CFormGroup>\r\n                                                            <CLabel htmlFor=\"name\">Bilty Number</CLabel>\r\n                                                            <CInput id=\"name\" placeholder=\"Bilty Number\" required value={bilty_no} onChange={(e) => setBiltyNo(e.target.value)} />\r\n                                                        </CFormGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                                <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CFormGroup>\r\n                                                            <CLabel htmlFor=\"name\">Bilty Amount</CLabel>\r\n                                                            <CInput id=\"name\" type=\"number\" placeholder=\"Bilty Amount\" required value={bilty_amount} onChange={(e) => setBiltyAmount(e.target.value)} />\r\n                                                        </CFormGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                                <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CFormGroup>\r\n                                                            <CLabel htmlFor=\"name\">Return Amount</CLabel>\r\n                                                            <CInput id=\"name\" type=\"number\" placeholder=\"Return Amount\" required value={return_amount} onChange={(e) => setReturnAmount(e.target.value)} />\r\n                                                        </CFormGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                                {/* <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CFormGroup>\r\n                                                            <CLabel htmlFor=\"name\">Transport Name</CLabel>\r\n                                                            <CInput id=\"name\" type=\"text\" placeholder=\"Transport Name\" required value={transport_name} onChange={(e) => setTransportName(e.target.value)} />\r\n                                                        </CFormGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n\r\n\r\n                                                <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CFormGroup>\r\n                                                            <CLabel htmlFor=\"ccmonth\">Transport No</CLabel>\r\n                                                            <CRow>\r\n                                                                <CCol>\r\n                                                                    <CInput id=\"ccmonth\" placeholder=\"Transport Number One\" value={transport_no.length > 0 ? transport_no[0] : \"\"} onChange={(e) => setTransportNo([e.target.value, transport_no[1]])} />\r\n\r\n                                                                </CCol>\r\n                                                                <CCol>\r\n                                                                    <CInput id=\"ccmonth\" placeholder=\"Transport Number Two\" value={transport_no.length > 1 ? transport_no[1] : \"\"} onChange={(e) => setTransportNo([transport_no[0], e.target.value])} />\r\n\r\n                                                                </CCol>\r\n                                                            </CRow>\r\n\r\n\r\n                                                        </CFormGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                                <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CFormGroup>\r\n                                                            <CLabel htmlFor=\"ccmonth\">Transport Address</CLabel>\r\n                                                            <CRow>\r\n                                                                <CCol>\r\n                                                                    <CInput id=\"ccmonth\" placeholder=\"First Transport Address\" value={transport_address.length > 0 ? transport_address[0] : \"\"} onChange={(e) => setTransportAddress([e.target.value, transport_address[1]])} />\r\n\r\n                                                                </CCol>\r\n                                                                <CCol>\r\n                                                                    <CInput id=\"ccmonth\" placeholder=\"Second Transport Address\" value={transport_address.length > 1 ? transport_address[1] : \"\"} onChange={(e) => setTransportAddress([transport_address[0], e.target.value])} />\r\n\r\n                                                                </CCol>\r\n                                                            </CRow>\r\n\r\n\r\n                                                        </CFormGroup>\r\n                                                    </CCol>\r\n                                                </CRow> */}\r\n                                                <CRow>\r\n                                                    <CCol xs=\"12\">\r\n                                                        <CFormGroup>\r\n                                                            <CLabel htmlFor=\"name\">Note</CLabel>\r\n                                                            <CTextarea id=\"name\" type=\"text\" placeholder=\"Comments\" required value={note} onChange={(e) => setNote(e.target.value)} ></CTextarea>\r\n                                                        </CFormGroup>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n\r\n                                                <CRow style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                                                    <CCol md=\"2\" >\r\n                                                        <CButton block variant=\"outline\" color=\"dark\" onClick={() => createInvoice()}>Create Invoice </CButton>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n\r\n\r\n\r\n\r\n                                    </CTabPane>\r\n\r\n                                </CTabContent>\r\n\r\n                            </CTabs>\r\n\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n\r\n\r\n            </CRow>\r\n\r\n        </CContainer>\r\n    )\r\n}\r\n\r\nexport default CreateInvoice\r\n"],"sourceRoot":""}