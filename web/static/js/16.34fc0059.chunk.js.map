{"version":3,"sources":["apimiddleware/url.js","apimiddleware/postMethod/index.js","views/customer/Updatecustomer.js"],"names":["baseURL","basePATH","POST_METHOD","payload","url","token","a","console","log","fetch","method","headers","body","JSON","stringify","response","status","json","res","alert","details","message","Customer","props","useState","c_id","setId","name","setName","phone","setPhone","address","setAddress","remarks","setRemarks","discount","setDiscount","balance","setBalance","_id","set_id","submit","axios","put","history","goBack","data","deleteUser","prompt","delete","useEffect","location","state","toFixed","style","display","justifyContent","onClick","marginLeft","cursor","xs","htmlFor","id","placeholder","required","value","onChange","e","target","type","outline"],"mappings":"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","file":"static/js/16.34fc0059.chunk.js","sourcesContent":["export const baseURL = \"http://localhost:8000/api/\"\r\n// \"https://maclay.herokuapp.com/api/\";\r\nexport const basePATH = \"https://maclay.herokuapp.com/\"\r\n\r\n\r\n// export const baseURL = \"http://localhost:8000/api/\"\r\n// // \"https://maclay.herokuapp.com/api/\";\r\n// export const basePATH = \"http://localhost:8000/\"\r\n\r\n","\r\nimport { baseURL } from \"../url\";\r\nconst POST_METHOD = async (payload, url , token)=> {\r\n    console.log(payload,baseURL + `${url}` , 'yes')\r\n    try {\r\n        let response =await  fetch(\r\n            baseURL + `${url}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization' : `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(payload)\r\n            })\r\n            let res;\r\n            console.log(\"respone\" , response)\r\n            if(response.status == 200){\r\n                res = await response.json();\r\n               alert(\"Successfully Added\")\r\n                return res\r\n            }else if(response.status == 401){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 404){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 400){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(res.details[0].message)\r\n            }\r\n            else if(response.status == 202){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(\"Already Exists\")\r\n            }\r\n    }\r\n    catch (error) {\r\n        console.log(\"err\" , error)\r\n        alert(error)\r\n        // console.error(error);\r\n    }\r\n}\r\n\r\n\r\nexport default POST_METHOD;","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CCol,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CRow,\r\n    CTabContent,\r\n    CTabPane,\r\n    CCard,\r\n    CCardBody,\r\n    CTabs,\r\n    CCardHeader,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CSelect,\r\n    CContainer,\r\n    CButton\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react';\r\nimport POST_METHOD from \"../../apimiddleware/postMethod\";\r\nimport axios from 'axios';\r\nimport { baseURL } from '../../apimiddleware/url';\r\nimport { cibSublimeText } from '@coreui/icons';\r\n\r\n\r\nconst Customer = (props) => {\r\n    \r\n    const [c_id , setId] = useState('');\r\n    const [name , setName] = useState('');\r\n    const [phone , setPhone] = useState('');\r\n    const [address , setAddress] = useState('');\r\n    const [remarks , setRemarks] = useState('');\r\n    const [discount , setDiscount] = useState('');\r\n    const [balance , setBalance] = useState('');\r\n    const [_id  , set_id] =useState('')\r\n\r\n    console.log(\"props\" , props);\r\n    const submit = async()=>{\r\n        try{\r\n            let data = await axios.put(`${baseURL}customer/${_id}` , {\r\n                c_id  , name ,phone , address , remarks , discount , balance \r\n            })\r\n            if(data.status == 200){\r\n                alert(\"Successfully Updated\");\r\n                props.history.goBack();\r\n            }\r\n        }catch(err){\r\n            alert(err.response.data)\r\n        }\r\n    }\r\n\r\n    const deleteUser = async()=>{\r\n        try{\r\n            let text = prompt(\"Are You sure to Delete this customer?\" , \"yes\");\r\n            if(text == \"yes\"){\r\n                let data = await axios.delete(`${baseURL}customer/${_id}` );\r\n                console.log(\"data\" , data , _id);\r\n                if(data.status == 200){\r\n                    alert(\"Successfully Deleted\");\r\n                     props.history.goBack();\r\n                }\r\n            }\r\n           \r\n        }catch(err){\r\n            alert(err.response.message)\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        if(props.location && props.location.state && props.location.state._id){\r\n            let data = props.location.state\r\n            setId(data.c_id);\r\n            setName(data.name);\r\n            setPhone(data.phone);\r\n            setAddress(data.address);\r\n            setRemarks(data.remarks);\r\n            setDiscount(data.discount);\r\n            setBalance(data.balance.toFixed(2));\r\n            set_id(data._id)\r\n        }\r\n    } , [])\r\n\r\n   \r\n\r\n    return (\r\n        <CContainer>\r\n            <CCard>\r\n                <CCardHeader>\r\n                    <div style={{display:\"flex\" , justifyContent:\"space-between\"}}>\r\n                    <b>Update Customer</b>\r\n                    <CIcon onClick={()=>deleteUser()} style={{marginLeft:\"10px\" , cursor:\"pointer\"}} name=\"cil-trash\" />\r\n                                                        \r\n                    </div>\r\n                    \r\n                </CCardHeader>\r\n                <CCardBody>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Customer Id</CLabel>\r\n                                <CInput id=\"name\" placeholder=\"Enter Customer Id\" required value={c_id} onChange={(e) => setId(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Name</CLabel>\r\n                                <CInput id=\"name\" placeholder=\"Enter Customer Name\" required value={name} onChange={(e) => setName(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccnumber\">Phone</CLabel>\r\n                                <CInput id=\"ccnumber\" placeholder=\"Contact Number\" value={phone} onChange={(e) => setPhone(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccnumber\">Address</CLabel>\r\n                                <CInput type=\"string\" id=\"ccnumber\" placeholder=\"Customer Address\" required value={address} onChange={(e) => setAddress(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccnumber\">Remarks</CLabel>\r\n                                <CInput type=\"string\" id=\"ccnumber\" placeholder=\"Remarks\" required value={remarks} onChange={(e) => setRemarks(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Discount</CLabel>\r\n                                <CInput id=\"name\" type=\"number\" placeholder=\"Discount\" required value={discount} onChange={(e) => setDiscount(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Balance</CLabel>\r\n                                <CInput id=\"name\" type=\"number\" placeholder=\"Balance\" required value={balance} onChange={(e) => setBalance(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\" style={{display:\"flex\" , justifyContent:\"flex-end\"}}>\r\n                            <CButton onClick={()=> submit()} outline >Edit</CButton>   \r\n                        </CCol>\r\n                    </CRow>\r\n                    \r\n                </CCardBody>\r\n            </CCard>\r\n        </CContainer>\r\n    )\r\n}\r\n\r\nexport default Customer\r\n"],"sourceRoot":""}