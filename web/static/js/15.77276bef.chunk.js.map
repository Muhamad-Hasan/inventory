{"version":3,"sources":["apimiddleware/url.js","apimiddleware/postMethod/index.js","views/customer/Customer.js"],"names":["baseURL","basePATH","POST_METHOD","payload","url","token","a","console","log","fetch","method","headers","body","JSON","stringify","response","status","json","res","alert","details","message","Customer","useState","c_id","setId","name","setName","phone","setPhone","address","setAddress","remarks","setRemarks","discount","setDiscount","balance","setBalance","disable","setDisable","submit","includes","axios","post","data","xs","md","sm","htmlFor","id","placeholder","required","value","onChange","e","target","type","style","display","justifyContent","disabled","onClick","outline"],"mappings":"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","file":"static/js/15.77276bef.chunk.js","sourcesContent":["export const baseURL = \"http://localhost:8000/api/\"\r\n// \"https://maclay.herokuapp.com/api/\";\r\nexport const basePATH = \"https://maclay.herokuapp.com/\"\r\n\r\n\r\n// export const baseURL = \"http://localhost:8000/api/\"\r\n// // \"https://maclay.herokuapp.com/api/\";\r\n// export const basePATH = \"http://localhost:8000/\"\r\n\r\n","\r\nimport { baseURL } from \"../url\";\r\nconst POST_METHOD = async (payload, url , token)=> {\r\n    console.log(payload,baseURL + `${url}` , 'yes')\r\n    try {\r\n        let response =await  fetch(\r\n            baseURL + `${url}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization' : `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(payload)\r\n            })\r\n            let res;\r\n            console.log(\"respone\" , response)\r\n            if(response.status == 200){\r\n                res = await response.json();\r\n               alert(\"Successfully Added\")\r\n                return res\r\n            }else if(response.status == 401){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 404){\r\n                res = await response.json();\r\n                console.log(\"respone\" , res)\r\n              \r\n            }else if(response.status == 400){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(res.details[0].message)\r\n            }\r\n            else if(response.status == 202){\r\n                res = await response.json();\r\n                console.log(\"400\" , res)\r\n                alert(\"Already Exists\")\r\n            }\r\n    }\r\n    catch (error) {\r\n        console.log(\"err\" , error)\r\n        alert(error)\r\n        // console.error(error);\r\n    }\r\n}\r\n\r\n\r\nexport default POST_METHOD;","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    CCol,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CRow,\r\n    CTabContent,\r\n    CTabPane,\r\n    CCard,\r\n    CCardBody,\r\n    CTabs,\r\n    CCardHeader,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CSelect,\r\n    CContainer,\r\n    CButton\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react';\r\nimport POST_METHOD from \"../../apimiddleware/postMethod\";\r\nimport axios from 'axios';\r\nimport { baseURL } from '../../apimiddleware/url';\r\nimport { cibSublimeText } from '@coreui/icons';\r\n\r\n\r\nconst Customer = () => {\r\n    \r\n    const [c_id , setId] = useState('');\r\n    const [name , setName] = useState('');\r\n    const [phone , setPhone] = useState('');\r\n    const [address , setAddress] = useState('');\r\n    const [remarks , setRemarks] = useState('');\r\n    const [discount , setDiscount] = useState(0);\r\n    const [balance , setBalance] = useState(0);\r\n    const [disable , setDisable] =useState(false)\r\n    const submit = async()=>{\r\n        setDisable(true)\r\n        if(c_id.includes(\"-\")){\r\n            alert(\"Dash (-) is not allowed in Customer Id\");\r\n            return\r\n        }\r\n        try{\r\n            let data = await axios.post(`${baseURL}customer` , {\r\n                c_id  , name ,phone , address , remarks , discount , balance \r\n            })\r\n            console.log(\"data\" , data);\r\n            if(data.status == 200){\r\n                alert(\"Successfully Added\");\r\n                setDisable(false)\r\n        \r\n            }\r\n        }catch(err){\r\n            setDisable(false)\r\n            console.log(\"err\" , err.response);\r\n            if(err.response.data){\r\n                alert(err.response.data)    \r\n            }else{\r\n                alert(err.response.data.details[0].message)\r\n        \r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CContainer>\r\n            <CCard xs=\"12\" md=\"12\" sm=\"12\">\r\n                <CCardHeader>\r\n                    <center><b>Add Customer</b></center>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Customer Id</CLabel>\r\n                                <CInput id=\"name\" placeholder=\"Enter Customer Id\" required value={c_id} onChange={(e) => setId(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Name</CLabel>\r\n                                <CInput id=\"name\" placeholder=\"Enter Customer Name\" required value={name} onChange={(e) => setName(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccnumber\">Phone</CLabel>\r\n                                <CInput id=\"ccnumber\" placeholder=\"Contact Number\" value={phone} onChange={(e) => setPhone(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccnumber\">Address</CLabel>\r\n                                <CInput type=\"string\" id=\"ccnumber\" placeholder=\"Customer Address\" required value={address} onChange={(e) => setAddress(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ccnumber\">Remarks</CLabel>\r\n                                <CInput type=\"string\" id=\"ccnumber\" placeholder=\"Remarks\" required value={remarks} onChange={(e) => setRemarks(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Discount</CLabel>\r\n                                <CInput id=\"name\" type=\"number\" placeholder=\"Discount\" required value={discount} onChange={(e) => setDiscount(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"name\">Balance</CLabel>\r\n                                <CInput id=\"name\" type=\"number\" placeholder=\"Balance\" required value={balance} onChange={(e) => setBalance(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CCol xs=\"12\" style={{display:\"flex\" , justifyContent:\"flex-end\"}}>\r\n                            <CButton disabled={disable} onClick={()=> submit()} outline >Submit</CButton>   \r\n                        </CCol>\r\n                    </CRow>\r\n                    \r\n                </CCardBody>\r\n            </CCard>\r\n        </CContainer>\r\n    )\r\n}\r\n\r\nexport default Customer\r\n"],"sourceRoot":""}